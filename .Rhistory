} else if(is.character(mes)) {
print("Dhaago se bandha")
} else {
print("Chal hatt")
}
a1 = c(1:5)
a2 = c(TRUE,FALSE,TRUE)
a1[c(a2)]
mean = sum(mid * f) / N
mean
cf = cumsum(f)
cf
Median = L + (((N / 2) - c) / mf) * 5  # Formula for Median
Median
mc
m = which(f == max(f))  # Find the index of the modal class
L_mode = mid[m] - 5  # Lower limit of modal class
f0 = f[m - 1]  # Frequency of the class before modal class
f1 = f[m]  # Frequency of the modal class
f2 = f[m + 1]  # Frequency of the class after modal class
Mode = L_mode + ((f1 - f0) / (2 * f1 - f0 - f2)) * 5  # Mode formula
Mode
variance = sum(f * (mid - mean)^2) / N
variance
function = greet(name) {
function <- greet(name) {
function <- greet (name) {
greet <- function (name) {
print(paste("Hello bhai, ",name," kemon?"))
}
greet("Atri")
greet <- function (name) {
print(paste("Hello bhai,",name,"kemon?"))
}
greet("Gandu")
greet <- function (name) {
print(paste("Hello bhai,","kemon?",sep=name))
}
greet("Gandu")
greet <- function (name) {
print(paste("Hello bhai,","kemon?",collapse=name))
}
greet("Gandu")
greet <- function (name) {
print(paste("Hello bhai,","kemon?",collapse=" "))
}
greet("Gandu")
greet <- function (name) {
print(paste("Hello bhai,","kemon?",collapse="-"))
}
greet("Gandu")
area = function(r) {
return(pi*r*r)
}
area(10)
str = "Learning R is fun!"
str
grepl(str,"fun","awesome")
str = "Learning R is fun!"
str
sub(str,"fun","awesome")
str
sub(str,"awesome","fun")
str
str = "Learning R is fun!"
str
sub("fun","awesome",str)
paste("Anek kedechhi","Kadite parina","Chokh jole bhije jay maa",collapse="-")
paste("Anek kedechhi","Kadite parina","Chokh jole bhije jay maa",sep="-")
factorial = function(num) {
if(num==0)
return(1)
else
return(num*factorial(num-1))
}
for i in 1:10 {
for (i in 1:10) {
print(paste("Factorial",num,"=",factorial(i)))
}
for (i in 1:10) {
print(paste("Factorial",i,"=",factorial(i)))
}
name1 = "Atri"
name2 = "Aprameya"
name2-name1
name1 = "Atri"
name2 = "Aprameya"
name2+name1
name1 = "Atri"
name2 = "Aprameya"
name2,name1
name1 = "Atri"
name2 = "Aprameya"
extra = nchar(name2) - nchar(name1)
name1 = paste(name1, rep("0",extra))
name1
name1 = paste(name1, rep("0",extra),concat)
name1 = "Atri"
name2 = "Aprameya"
extra = nchar(name2) - nchar(name1)
name1 = paste(name1, rep("0",extra))
name1
name1 = "Atri"
name2 = "Aprameya"
extra = nchar(name2) - nchar(name1)
name1 = paste(name1, rep("0",extra),collapse="")
name1
name1 = "Atri"
name2 = "Aprameya"
extra = nchar(name2) - nchar(name1)
name1 = paste0(name1, rep("0",extra))
name1
name1 = "Atri"
name2 = "Aprameya"
extra = nchar(name2) - nchar(name1)
name1 = paste0(name1, rep("0",extra),collapse="")
name1
name1
name1 = "Atri"
name2 = "Aprameya"
extra = nchar(name2) - nchar(name1)
name1 = paste0(name1, paste(rep("0", extra), collapse = ""))
name1
name1 = "Atri"
name2 = "Aprameya"
extra = nchar(name2) - nchar(name1)
name1 = paste(name1, rep("0",extra))
name1
extras = rep("0",extra)
extras
name1 = paste(name1, "0"*extra)
name1 = paste(name1, rep("0",extra))
name1
name1 = paste0(name1, rep("0",extra))
name1
name1 = "Atri"
name2 = "Aprameya"
extra = nchar(name2) - nchar(name1)
name1 = paste0(name1, rep("0",extra))
name1
rep("0",extra)
paste(rep("0",extra),collapse="")
ame1 = "Atri"
name2 = "Aprameya"
extra = nchar(name2) - nchar(name1)
name1 = paste(paste(rep("0",extra),collapse=""))
name1 = "Atri"
name2 = "Aprameya"
extra = nchar(name2) - nchar(name1)
name1 = paste(paste(rep("0",extra),collapse=""))
name1
name1 = paste(name1,paste(rep("0",extra),collapse=""))
name1
name1 = paste(name1,(paste(rep("0",extra),collapse="")),collapse="")
name1
name1 = "Atri"
name2 = "Aprameya"
extra = nchar(name2) - nchar(name1)
name1 = paste(name1,(paste(rep("0",extra),collapse="")),collapse="")
name1
name1 = "Atri"
name2 = "Aprameya"
extra = nchar(name2) - nchar(name1)
name1 = paste0(name1,(paste(rep("0",extra),collapse="")),collapse="")
name1
table(c("a", "b", "a"))
unique(c(1, 1, 2, 3))
e
exp(3)
exp(3)*cos(3)
cos(60)
data <- data.frame(name = c("Dia", "Raj"), age = c(10, 40))
data
dim(data)         # Dimensions: 2 rows, 2 columns
colnames(data)    # Column names: "name", "age"
rownames(data)    # Row names
summary(data)
x <- c(1, 2, 3, 4, 5)
y <- c(2, 4, 6, 8, 10)
# Create a scatter plot
plot(x, y, type = "o", col = "blue", main = "Line Plot", xlab = "X-axis", ylab = "Y-axis")
v = c(2, 5, 7, 3, 9)
sum(v)
mean(v)
v[v>4]
v
v[which(v<5)]=0
v
a = c(1, 2, 3, 4)
b = c(5, 6, 7, 8)
mat = matrix(c(a,b),nrow=2,ncol=4,byrow=TRUE)
mat
newl = list(c(1,2,3), "Hello", TRUE)
for (i in newl)
list$i
newl = list(c(1,2,3), "Hello", TRUE)
for (i in newl)
list[[i]]
newl = list(c(1,2,3), "Hello", TRUE)
for (i in newl)
newl$i
newl = list(c(1,2,3), "Hello", TRUE)
for (i in newl)
print(newl$i)
newl = list(c(1,2,3), "Hello", TRUE)
for (i in newl)
print(i)
newl = list(lis=c(1,2,3),ku= "Hello",ok= TRUE)
for (i in names(newl))
print(newl$i)
newl = list(lis=c(1,2,3),ku= "Hello",ok= TRUE)
for (i in names(newl))
print(newl[i])
newl = list(lis=c(1,2,3),ku= "Hello",ok= TRUE)
for (i in names(newl))
print(newl[[i]])
newl = list(lis=c(1,2,3),ku= "Hello",ok= TRUE)
for (i in names(newl))
print(newl$i)
new$ku
new$"ku"
newl$ku
newl[["ku"]]
newl$"ku"
prices = c(200, 500, 150, 300, 450, 600, 750)
cond = prices[prices%%50==0]
cond
cond = [prices%%50==0]
prices = c(200, 500, 150, 300, 450, 600, 750)
cond = [prices%%50==0]
prices = c(200, 500, 150, 300, 450, 600, 750)
cond = prices%%50==0
cond
name1>name2
name1<name2
name1 = "Atri"
name2 = "Aprameya"
name1<name2
as.integer(name1)
as.integer(charToRaw(name1))
atri = paste(name1,collapse="")
atri
atri = paste0(name1,collapse="")
atri
segregated_chars = strsplit(name1, split = "")
segregated_chars
segregated_chars[[1]]
for (i in name1)
print(i)
for (i in name1)
paste(i," ")
for (i in name1)
print(paste(i," "))
for (i in strsplit(name1, split="")
print(paste(i," "))
for (i in strsplit(name1, split=""))
print(paste(i," "))
as.integer(charToRaw("w"))+15
rawToChar(t-25)
rawToChar(as.raw(t-25))
t = as.integer(charToRaw("w"))+15
x = rawToChar(as.raw(t-25))
x
name2 = "Kumar Aprameya"
sub("Kumar","Bihari",name2)
name2
name2 = "Kumar Aprameya"
name2 = sub("Kumar","Bihari",name2)
name2
name2[1:3]
name2[1]
str(movies)
lapply(movies, mean(ratings))
lapply(movies, mean(movies[[ratings]]))
lapply(movie, mean(movies[[ratings]]))
lapply(movie, function(movie) mean(movie[[ratings]]))
lapply(movie, function(movie) mean(movie$ratings))
average_ratings <- lapply(movies, function(movie) mean(movie$ratings))
average_ratings
lapply(movies, function(movie) mean(movie$ratings))
lapply(movies, function(movie) mean(movie$ratings]]))
lapply(movies, function(movie) mean(movie$ratings]))
lapply(movies, function(movie) mean(movie$ratings))
sapply(movies, function(movie) mean(movie$ratings))
movies$movie5 <- list(name = "Coco", genre = "Animation", ratings = c(5, 4, 4, 5, 5))
avg = sapply(movies, function(movie) mean(movie$ratings))
movies = sort(movies[order(avg)])
movies = movies[order(avg)]
movies = movies[order(avg)]
movies
movies = movies[order(-avg)]
movies
movies <- list(
movie1 = list(name = "Inception", genre = "Sci-Fi", ratings = c(5, 4, 5, 4, 5)),
movie2 = list(name = "The Godfather", genre = "Crime", ratings = c(5, 5, 5, 4, 4)),
movie3 = list(name = "Toy Story", genre = "Animation", ratings = c(4, 5, 4, 5, 3)),
movie4 = list(name = "The Dark Knight", genre = "Action", ratings = c(5, 5, 4, 5, 5))
)
# Adding a new movie
movies$movie5 <- list(name = "Coco", genre = "Animation", ratings = c(5, 4, 4, 5, 5))
# Calculate average ratings for all movies
avg = sapply(movies, function(movie) mean(movie$ratings))
# Reorder the movies list based on descending average ratings
movies = movies[order(-avg)]
# Display the reordered list
movies
for (i in names(movies)) {
movies[[i]]$avg_rtg = avg[i]
}
movies
ani = filter(movies, function(movie) movie$genre=="Animation")
ani = filter( function(movie) movie$genre=="Animation", movies)
ani = filter(movies, function(movie) movie$genre="Animation")
genre_filter <- "Animation"
animation_movies <- Filter(function(movie) movie$genre == genre_filter, movies)
ani = Filter(movies, function(movie) movie$genre=="Animation")
genre_filter <- "Animation"
animation_movies <- Filter(function(movie) movie$genre == genre_filter, movies)
animation_movies
ani = Filter(function(movie) movie$genre=="Animation", movies)
ani
ani = Filter(function(movie) mean(movie$ratings)>=4.5, movies)
ani
a Frames
sale = data.frame(Name = "Hard Disk", Price=3500, Discount=15, Units=50)
sale
calculate_total_revenue = function(price, disc, unt) {
totr = (price - (disc/100)*price)*unt
return (totr)
}
#Data Frames
sale = data.frame(Name = "Hard Disk", Price=3500, Discount=15, Units=50)
sale
print(paste("Total Revenue:",calculate_total_revenue(sale$Price,sale$Discount,sale$Units)))
tr = calculate_total_revenue(sale$Price,sale$Discount,sale$Units
sale$Sale_Status = ifelse(tr>150000, "High", "Low")
sale$Sale_Status = ifelse(tr>150000, "High", "Low")
sale$Sale_Status = ifelse(tr>150000, "High", "Low")
tr = calculate_total_revenue(sale$Price,sale$Discount,sale$Units
print(paste("Total Revenue:",tr)))
tr = calculate_total_revenue(sale$Price,sale$Discount,sale$Units)
print(paste("Total Revenue:",tr)))
sale = data.frame(Name = "Hard Disk", Price=3500, Discount=15, Units=50)
sale
tr = calculate_total_revenue(sale$Price,sale$Discount,sale$Units)
print(paste("Total Revenue:",tr)))
tr = calculate_total_revenue(sale$Price,sale$Discount,sale$Units)
print(paste("Total Revenue:",tr))
sale$Sale_Status = ifelse(tr>150000, "High", "Low")
if(sale$Price>3000) {
sale$Product_Category = "Premium"
} else if(sale$Price>2000) {
sale$Product_Category = "Standard"
} else {
sale$Product_Category = "Budget"
}
sale
sale = data.frame(
Name = c("Hard Disk", "Laptop", "Smartphone", "Tablet", "Monitor"),
Price = c(3500, 45000, 25000, 15000, 12000),
Discount = c(15, 10, 5, 20, 12),
Units = c(50, 20, 100, 30, 70)
)
sale
for(i in nrow(sale)) {
tr = calculate_total_revenue(sale[i]$Price,sale[i]$Discount,sale[i]$Units)
sale[i]$Sale_Status = ifelse(tr>150000, "High", "Low")
if(sale[i]$Price>3000) {
sale[i]$Product_Category = "Premium"
} else if(sale$Price>2000) {
sale[i]$Product_Category = "Standard"
} else {
sale[i]$Product_Category = "Budget"
}
}
for(i in 1:nrow(sale)) {
tr = calculate_total_revenue(sale[i]$Price,sale[i]$Discount,sale[i]$Units)
sale[i]$Sale_Status = ifelse(tr>150000, "High", "Low")
if(sale[i]$Price>3000) {
sale[i]$Product_Category = "Premium"
} else if(sale$Price>2000) {
sale[i]$Product_Category = "Standard"
} else {
sale[i]$Product_Category = "Budget"
}
}
calculate_total_revenue = function(price, disc, unt) {
totr = (price - (disc/100)*price)*unt
return (totr)
}
#Data Frames
sale = data.frame(
Name = c("Hard Disk", "Laptop", "Smartphone", "Tablet", "Monitor"),
Price = c(3500, 45000, 25000, 15000, 12000),
Discount = c(15, 10, 5, 20, 12),
Units = c(50, 20, 100, 30, 70)
)
sale
for(i in 1:nrow(sale)) {
tr = calculate_total_revenue(sale[i]$Price,sale[i]$Discount,sale[i]$Units)
sale[i]$Sale_Status = ifelse(tr>150000, "High", "Low")
if(sale[i]$Price>3000) {
sale[i]$Product_Category = "Premium"
} else if(sale$Price>2000) {
sale[i]$Product_Category = "Standard"
} else {
sale[i]$Product_Category = "Budget"
}
}
calculate_total_revenue = function(price, disc, unt) {
totr = (price - (disc/100)*price)*unt
return (totr)
}
#Data Frames
sale = data.frame(
Name = c("Hard Disk", "Laptop", "Smartphone", "Tablet", "Monitor"),
Price = c(3500, 45000, 25000, 15000, 12000),
Discount = c(15, 10, 5, 20, 12),
Units = c(50, 20, 100, 30, 70)
)
sale
for(i in 1:nrow(sale)) {
tr = calculate_total_revenue(sale$Price[i],sale$Discount[i],sale$Units[i])
sale$Sale_Status[i] = ifelse(tr>150000, "High", "Low")
if(sale$Price[i]>3000) {
sale$Product_Category[i] = "Premium"
} else if(sale$Price[i]>2000) {
sale$Product_Category[i] = "Standard"
} else {
sale$Product_Category[i] = "Budget"
}
}
sale
sale$Discount
sale[,"Discount"]
library(dplyr)
install.packages("dplyr")
library(dplyr)
data = data(mtcars)
data
data = data(mtcars)
data(mtcars)
library(dplyr)
data(mtcars)
install.packages("dplyr")
library(dplyr)
data <- mtcars
data
str(data)
summary(data)
head(data$mpg, 10)
summary(data$mpg)
selected_data <- select(data, mpg, cyl, hp)
selected_data
filtered_data <- filter(data, mpg > 25, cyl == 4)
filtered_data
sorted_data <- arrange(data, desc(mpg))
sorted_data
top_5_hp <- arrange(data, desc(hp)) %>% head(5)
top_5_hp
top_5_hp <- data %>% arrange(desc(hp)) %>% head(5)
top_5_hp
transformed_data <- data %>% mutate(power_to_weight_ratio = hp / wt)
transformed_data
cars_performance <- data %>%
mutate(performance_category = case_when(
hp >= 200 ~ "High",
hp >= 100 ~ "Medium",
TRUE ~ "Low"
))
# Categorize cars into High, Medium, and Low performance
cars_performance <- data %>%
mutate(performance_category = case_when(
hp >= 200 ~ "High",
hp >= 100 ~ "Medium",
TRUE ~ "Low"
))
cars_performance
data <- data %>% mutate(power_to_weight_ratio = hp / wt)
data
cars_performance <- data %>%
mutate(performance_category = case_when(
hp >= 200 ~ "High",
hp >= 100 ~ "Medium",
TRUE ~ "Low"
))
cars_performance
grouped_data <- data %>% group_by(cyl) %>% summarise(average_mpg = mean(mpg))
grouped_data
cars_by_gear <- data %>% count(gear)
cars_by_gear
merged_data <- data %>% inner_join(engine_data, by = "cyl")
engine_data <- data.frame(
cyl = c(4, 6, 8),
engine_type = c("Efficient", "Balanced", "Powerful")
)
engine_data
merged_data <- data %>% inner_join(engine_data, by = "cyl")
merged_data
merged_mtcars_data <- data %>% left_join(engine_data, by = "cyl")
merged_mtcars_data
advanced_data <- data %>% filter(cyl > 6) %>%
summarise(average_mpg = mean(mpg)) %>% arrange(desc(average_mpg))
advanced_data
combined_data <- data %>% select(mpg, hp, wt) %>% filter(mpg > 20) %>%
mutate(hp_to_wt_ratio = hp / wt) %>% arrange(hp_to_wt_ratio)
combined_data
setwd("C:/Users/Atri Chakraborty/ipl-predictor")
data = read.csv("Dataset.csv",header = TRUE, stringsAsFactors = FALSE)
data[(data$team1 == "Chennai Super Kings" |
data$team2 == "Chennai Super Kings") &
data$venue == "Eden Gardens, Kolkata", ]
